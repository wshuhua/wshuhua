(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{518:function(t,s,a){"use strict";a.r(s);var n=a(28),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"算法复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法复杂度"}},[t._v("#")]),t._v(" 算法复杂度")]),t._v(" "),a("p",[t._v("算法复杂度是在计算在输入量为 N 的情况下，算法的[空间使用]和[时间使用]情况。\n体现算法运行使用的时间与空间随[数据大小 N]而增大的速度。")]),t._v(" "),a("p",[t._v("算法复杂度主要从时间和空间两个角度评价：")]),t._v(" "),a("ul",[a("li",[t._v("时间： 假设各操作的运行时间为固定常数，统计算法运行的「计算操作的数量」 ，以代表算法运行所需时间；")]),t._v(" "),a("li",[t._v("空间： 统计在最差情况下，算法运行所需使用的「最大空间」；")])]),t._v(" "),a("p",[t._v("「输入数据大小 N 」指算法处理的输入数据量；根据不同算法，具有不同定义，例如：")]),t._v(" "),a("p",[t._v("排序算法： N 代表需要排序的元素数量；\n搜索算法： N 代表搜索范围的元素总数，例如数组大小、矩阵大小、二叉树节点数、图节点和边数等；")]),t._v(" "),a("h3",{attrs:{id:"时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[t._v("#")]),t._v(" 时间复杂度")]),t._v(" "),a("p",[t._v("根据定义，时间复杂度指输入数据大小为 N 时，算法运行所需花费的时间，需要注意：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("统计的是算法的[计算操作数量]，而不是[运行的绝对时间]。计算操作数量与运行绝对时间呈正相关关系，并不相等。算法运行时间受到「编程语言 、计算机处理器速度、运行环境」等多种因素影响。")])]),t._v(" "),a("li",[a("p",[t._v("体现的是计算操作随数据大小 N 变化时的变化情况。\n根据定义，时间复杂度指输入数据大小为 N 时，算法运行所需花费的时间。需要注意：")])])]),t._v(" "),a("h4",{attrs:{id:"符号表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#符号表示"}},[t._v("#")]),t._v(" 符号表示")]),t._v(" "),a("p",[t._v("根据输入数据的特点，时间复杂度具有「最差」、「平均」、「最佳」三种情况，分别使用 O , Θ , Ω 三种符号表示。")]),t._v(" "),a("h4",{attrs:{id:"常见种类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见种类"}},[t._v("#")]),t._v(" 常见种类")]),t._v(" "),a("p",[t._v("根据从小到大排列，常见的算法时间复杂度主要有：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("O(1)<O(logN)<O(N)<O(NlogN)<O(N^2)<O(2^N)<O(N!)\n")])])]),a("p",[a("img",{attrs:{src:"/images/algorithm/1.png",alt:""}})]),t._v(" "),a("ul",[a("li",[a("p",[t._v("常数 O(1) ：\n运行次数与 N 大小呈常数关系，即不随输入数据大小 N 的变化而变化。(计算操作数量:1)")])]),t._v(" "),a("li",[a("p",[t._v("线性 O(N)：\n循环运行次数与 N 大小呈线性关系，时间复杂度为 O(N) 。比如 for 循环一次(计算操作数量:N)")])]),t._v(" "),a("li",[a("p",[t._v("平方 O(N^2) ：\n两层循环相互独立，都与 N 呈线性关系，因此总体与 N 呈平方关系，时间复杂度为 O(N^2)\n比如冒泡排序：")])]),t._v(" "),a("li",[a("p",[t._v("指数 O(2^N)：细胞分裂。指数阶常出现于递归")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/algorithm/2.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("阶乘 O(N!)：\n阶乘阶对应数学上常见的 “全排列” 。即给定 N 个互不重复的元素，求其所有可能的排列方案。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/algorithm/3.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("对数 O(log N) ：对数阶常出现于「二分法」、「分治」等算法中，体现着 “一分为二” 或 “一分为多” 的算法思想。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/algorithm/4.png",alt:""}})]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("algorithm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" a\n      count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" count\n")])])]),a("ul",[a("li",[t._v("线性对数 O(Nlog N):\n两层循环相互独立，第一层和第二层时间复杂度分别为 O(logN) 和 O(N)，则总体时间复杂度为 O(Nlog N)；")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function algorithm(N) {\n  var count = 0;\n  i = N;\n  while (i > 1) {\n    i = i / 2;\n    for (j in range(N)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n")])])]),a("p",[t._v("线性对数阶常出现于排序算法，例如「快速排序」、「归并排序」、「堆排序」等.")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/algorithm/5.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度"}},[t._v("#")]),t._v(" 空间复杂度")]),t._v(" "),a("p",[t._v("空间复杂度涉及的空间类型有：")]),t._v(" "),a("ul",[a("li",[t._v("输入空间： 存储输入数据所需的空间大小；")]),t._v(" "),a("li",[t._v("暂存空间： 算法运行过程中，存储所有中间变量和对象等数据所需的空间大小；")]),t._v(" "),a("li",[t._v("输出空间： 算法运行返回时，存储输出数据所需的空间大小；")])]),t._v(" "),a("p",[t._v("通常情况下，空间复杂度指在输入数据大小为 N 时，算法运行所使用的「暂存空间」+「输出空间」的总体大小。\n"),a("img",{attrs:{src:"/images/algorithm/6.png",alt:""}})]),t._v(" "),a("ol",[a("li",[t._v("指令空间：")])]),t._v(" "),a("p",[t._v("编译后，程序指令所使用的内存空间。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("数据空间：\n算法中的各项变量使用的空间，包括：声明的常量、变量、动态数组、动态对象等使用的内存空间。")]),t._v(" "),a("li",[t._v("栈帧空间：")])]),t._v(" "),a("p",[t._v("程序调用函数是基于栈实现的，函数在调用期间，占用常量大小的栈帧空间，直至返回后释放。如以下代码所示，在循环中调用函数，每轮调用 test() 返回后，栈帧空间已被释放，因此空间复杂度仍为 O(1) 。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("algorithm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("算法中，栈帧空间的累计常出现于递归调用。如以下代码所示，通过递归调用，会同时存在 N 个未返回的函数 algorithm() ，此时累计使用 O(N) 大小的栈帧空间。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("algorithm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("int "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("algorithm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"常见种类-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见种类-2"}},[t._v("#")]),t._v(" 常见种类")]),t._v(" "),a("p",[t._v("根据从小到大排列，常见的算法空间复杂度有：")]),t._v(" "),a("p",[t._v("O(1)<O(logN)<O(N)<O(N^2)<O(2^N)")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/algorithm/7.png",alt:""}})]),t._v(" "),a("ol",[a("li",[t._v("常数 O(1)：普通常量、变量、对象、元素数量与输入数据大小 N 无关的集合，皆使用常数大小的空间。")]),t._v(" "),a("li",[t._v("线性 O(N) ：元素数量与 N 呈线性关系的任意类型集合（常见于一维数组、链表、哈希表等），皆使用线性大小的空间")]),t._v(" "),a("li",[t._v("平方 O(N^2)：元素数量与 NN 呈平方关系的任意类型集合（常见于矩阵），皆使用平方大小的空间")]),t._v(" "),a("li",[t._v("指数 O(2^N)：指数阶常见于二叉树、多叉树")]),t._v(" "),a("li",[t._v("对数 O(logN)：对数阶常出现于分治算法的栈帧空间累计、数据类型转换等，例")])]),t._v(" "),a("h3",{attrs:{id:"数据结构简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构简介"}},[t._v("#")]),t._v(" 数据结构简介")]),t._v(" "),a("p",[t._v("常见的数据结构可分为[线性数据结构]与[非线性数据结构]，具体为：「数组」、「链表」、「栈」、「队列」、「树」、「图」、「散列表」、「堆」。\n"),a("img",{attrs:{src:"/images/algorithm/8.png",alt:""}})])])}),[],!1,null,null,null);s.default=r.exports}}]);