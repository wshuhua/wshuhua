(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{530:function(t,a,e){"use strict";e.r(a);var s=e(28),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("二者关系")]),t._v(" "),e("p",[t._v("协商缓存可以看作是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。")])]),t._v(" "),e("p",[t._v("浏览器启用协商缓存的前提是强缓存失效，但是反过来强缓存失效并不一定导致浏览器启用协商缓存。")]),t._v(" "),e("h2",{attrs:{id:"协商缓存的生效流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存的生效流程"}},[t._v("#")]),t._v(" 协商缓存的生效流程")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/cache/cache12.jpeg",alt:""}})]),t._v(" "),e("h2",{attrs:{id:"last-modified-etag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-etag"}},[t._v("#")]),t._v(" last-Modified/ETag")]),t._v(" "),e("p",[t._v("除了强制缓存失效以外，还需要借助服务器响应请求时返回的报头首部：last-modified 和etag（缓存标识）。\n"),e("img",{attrs:{src:"/images/cache/cache13.jpeg",alt:""}})]),t._v(" "),e("p",[t._v("etag的优先级要高于last-modified，当两者同时出现时，只有etag会生效，只要有这两个缓存标识之一，在强缓存失效后浏览器便会携带它们向服务器发起请求，携带方式如下所示：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('if-modified-since: Wed, 11 May 2022 03:50:47 GMT\nif-none-match: "700f049716443285878653598e"\n')])])]),e("ul",[e("li",[t._v("if-modified-since: 对应last-modified的值")]),t._v(" "),e("li",[t._v("if-none-match: 对应etag的值\n服务器根据优先级的缓存标识的值进行判断")])]),t._v(" "),e("p",[t._v("如果 eTag 对应的 if-none-match 不存在，那么服务器会将 last-modified 对应的 if-modified-since 的时间值与服务器该资源的最后修改时间进行对比，最后判断是否走协商缓存。")]),t._v(" "),e("h3",{attrs:{id:"二者区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二者区别"}},[t._v("#")]),t._v(" 二者区别")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("精确度： last-modified是一个时间，单位最小为秒，如果资源修改快到毫秒级别，服务器会任务该资源没有更新，导致资源在浏览器没有及时更新。")])]),t._v(" "),e("li",[e("p",[t._v("性能上：Etag要逊于Last-Modified，因为Last-Modified只需要记录时间，而Etag需要服务器通过算法来计算出一个hash值。")])]),t._v(" "),e("li",[e("p",[t._v("优先级上，服务器校验优先考虑Etag")])])]),t._v(" "),e("h2",{attrs:{id:"etag原理和实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag原理和实现"}},[t._v("#")]),t._v(" etag原理和实现")]),t._v(" "),e("p",[t._v("node下的"),e("a",{attrs:{href:"https://www.npmjs.com/package/etag",target:"_blank",rel:"noopener noreferrer"}},[t._v("etag"),e("OutboundLink")],1),t._v("为例：")]),t._v(" "),e("h3",{attrs:{id:"第一种方式-使用文件大小和修改时间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第一种方式-使用文件大小和修改时间"}},[t._v("#")]),t._v(" 第一种方式：使用文件大小和修改时间")]),t._v(" "),e("p",[t._v("图中当判断所要处理的内容是文件 stats 对象时，将会采用上述方法生成 eTag 值，最后返回的值是由文件大小和文件最后一次修改时间组成的字符串。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("/**\n * Generate a tag for a stat.\n *\n * @param {object} stat\n * @return {string}\n * @private\n */\n\nfunction stattag (stat) {\n  var mtime = stat.mtime.getTime().toString(16)\n  var size = stat.size.toString(16)\n\n  return '\"' + size + '-' + mtime + '\"'\n}\n\n")])])]),e("h3",{attrs:{id:"第二种方式-使用文件内容的-hash-值和内容长度。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第二种方式-使用文件内容的-hash-值和内容长度。"}},[t._v("#")]),t._v(" 第二种方式：使用文件内容的 hash 值和内容长度。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("/**\n * Generate an entity tag.\n *\n * @param {Buffer|string} entity\n * @return {string}\n * @private\n */\n\nfunction entitytag (entity) {\n  if (entity.length === 0) {\n    // fast-path empty\n    return '\"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk\"'\n  }\n\n  // compute hash of entity\n  var hash = crypto\n    .createHash('sha1')\n    .update(entity, 'utf8')\n    .digest('base64')\n    .substring(0, 27)\n\n  // compute length of entity\n  var len = typeof entity === 'string'\n    ? Buffer.byteLength(entity, 'utf8')\n    : entity.length\n\n  return '\"' + len.toString(16) + '-' + hash + '\"'\n}\n")])])]),e("p",[t._v("通过对内容的 hash 转化和截取，最终返回内容长度与其 hash 值组合成的字符串。")]),t._v(" "),e("p",[t._v("通过上述方法生成的 eTag 也被称为强 eTag 值，其不论实体发生多么细微的变化都会改变它的值。那么与其对立的便是弱 eTag 值，在 eTag 包源码中我们可以发现通过传递第二个参数 weak 值为 true 时便可启用弱校验。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function etag (entity, options) {\n  if (entity == null) {\n    throw new TypeError('argument entity is required')\n  }\n\n  // support fs.Stats object\n  var isStats = isstats(entity)\n  var weak = options && typeof options.weak === 'boolean'\n    ? options.weak\n    : isStats\n\n  // validate argument\n  if (!isStats && typeof entity !== 'string' && !Buffer.isBuffer(entity)) {\n    throw new TypeError('argument entity must be string, Buffer, or fs.Stats')\n  }\n\n  // generate entity tag\n  var tag = isStats\n    ? stattag(entity)\n    : entitytag(entity)\n\n  return weak\n    ? 'W/' + tag\n    : tag\n}\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("弱 ETag")]),t._v(" "),e("p",[t._v("弱 ETag 值只适用于提示资源是否相同。只有资源发生了根本改变，产生差异时才会改变 ETag 值。这时会在字段值最开始处附加 W/。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('ETag: W/"29322-09SpAhH3nXWd8KIVqB10hSSz66"\n')])])]),e("h2",{attrs:{id:"启发式缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启发式缓存"}},[t._v("#")]),t._v(" 启发式缓存")]),t._v(" "),e("p",[t._v("强缓存新鲜度的公式为：缓存新鲜度 = max-age || (expires - date)。响应报头中没有 max-age（s-maxage） 和 expires 这两个关键的字段值，浏览器还是会走强缓存")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("date: Thu, 02 Sep 2021 13:28:56 GMT\nage: 10467792\ncache-control: public\nlast-modified: Mon, 26 Apr 2021 09:56:06 GMT\n")])])]),e("p",[t._v("虽然有与协商缓存相关的 last-modified 首部，但并不会走协商缓存，反而浏览器会触发启发式缓存。启发式缓存对于缓存新鲜度计算公式如下所示：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("缓存新鲜度 = max(0,（date - last-modified)) * 10%\n")])])]),e("p",[e("strong",[t._v("根据响应报头中 date 与 last-modified 值之差与 0 取最大值后取其值的百分之十作为缓存时间。")])]),t._v(" "),e("h2",{attrs:{id:"浏览器缓存机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存机制"}},[t._v("#")]),t._v(" 浏览器缓存机制")]),t._v(" "),e("p",[e("img",{attrs:{src:"/images/cache/cache14.jpg",alt:""}})])])}),[],!1,null,null,null);a.default=n.exports}}]);