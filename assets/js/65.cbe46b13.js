(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{518:function(e,a,t){"use strict";t.r(a);var s=t(28),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"_01-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_01-简介"}},[e._v("#")]),e._v(" 01. 简介")]),e._v(" "),t("p",[e._v("three.js 是使用javascript来写3D程序。\n在浏览器端，WebGL 是一个底层的标准，在这些标准被定义后，Chrome、Firefox 之类的浏览器 实现了这些标准。然后，就能通过javascript 代码，在网页上实现 三维图形的渲染。 ThreeJS则是封装了底层了图形接口，更容易来实现3D程序。")]),e._v(" "),t("h4",{attrs:{id:"核心"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心"}},[e._v("#")]),e._v(" 核心")]),e._v(" "),t("p",[e._v("一个 典型的three.js  程序 至少需要包括 渲染器（Renderer），场景（Scene），照相机（Camera），以及你在场景中创建的物体。")]),e._v(" "),t("h5",{attrs:{id:"渲染器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染器"}},[e._v("#")]),e._v(" 渲染器")]),e._v(" "),t("p",[e._v("渲染器将和canvas 元素 进行绑定，如果在HTML中手动定义了canvas元素，那么Renderer 可以这样写")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var renderer = new THREE.WebGLRenderer({canvas: document.getElementById('#mainCanvas')});\n")])])]),t("p",[e._v("如果想在Three.js生成Canvas元素，在HTML中就不需要定义canvas元素，在javascript代码中可以这样写")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var renderer = new THREE.WebGLRenderer();\nrender.setSize(400, 400);\n")])])]),t("h5",{attrs:{id:"场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[e._v("#")]),e._v(" 场景")]),e._v(" "),t("p",[e._v("在Three.js 中添加的物体 都是添加到场景中的，因此它相当于一个大容器。在程序最开始的时候进行实例化，然后将物体添加到场景中。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var scene = new THREE.Scene();\n")])])]),t("p",[e._v("也就是说 ，场景是光源，相机和所有物体的父容器，通过："),t("code",[e._v("scene.children")]),e._v("可以访问到这些子物体。这些物体在创建的时候没有名字，可以通过"),t("code",[e._v("name")]),e._v(" 属性指定名字，这样就可以通过："),t("code",[e._v("scene.getChildByMName(name)")]),e._v("来访问具体夫人子物体。")]),e._v(" "),t("p",[t("code",[e._v("scene.traverse(funtion)")]),e._v(" 可以访问 该父场景中的所有子物体来执行回调函数。")]),e._v(" "),t("h5",{attrs:{id:"相机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相机"}},[e._v("#")]),e._v(" 相机")]),e._v(" "),t("p",[e._v("WebGL 和Three.js 使用的坐标系 是右手坐标系，即右手伸开，拇指为X，四指为Y，手心为Z。")]),e._v(" "),t("p",[e._v("相机就像是人的眼睛一样，人站在不同的位置，抬头或者低头都能够看到不同的景色。在Threejs中有多种相机，透视相机（"),t("code",[e._v("THREE.PerspectiveCamera")]),e._v("）用的最多。")]),e._v(" "),t("p",[e._v("定义：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var camera = new THRRR.PerspectiveCamera(45, 4 / 3, 1, 1000);\n")])])]),t("p",[e._v("注意： 相机也需要添加到场景中。")]),e._v(" "),t("h4",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("p",[e._v("Three.js 中的场景是一个物体的容器，开发者将需要的物体放入场景中。相机的作用就是指向场景，在场景中取一个合适的景，把它拍下来。 渲染器的作用就是 将相机拍摄下来的照片 放到浏览器显示。在定义了场景中的物体，设置好的照相机以后，渲染器就知道 如何让渲染出二维的结果。这个时候，只需要调用渲染器的渲染函数，就能使其渲染一次。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("renderer.render(scene, camera);\n")])])]),t("h4",{attrs:{id:"照相机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#照相机"}},[e._v("#")]),e._v(" 照相机")]),e._v(" "),t("p",[e._v("根据投影方式的不同，照相机又分为正交投影相机 和透视投影相机。使用透视投影照相机 获得的结果 是类似人眼看到的 有 ‘近大远小’的效果，而使用正交投影照相机 得到的结果就像是平面画3D的效果，在三维空间内平行的线，投影到二维空间中也一定是平行的。")]),e._v(" "),t("h5",{attrs:{id:"正交投影照相机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正交投影照相机"}},[e._v("#")]),e._v(" 正交投影照相机")]),e._v(" "),t("p",[e._v("正交投影照相机的构造函数是：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("THREE.OrthographicCamera(left, right, top, bottom, near, far)\n")])])]),t("p",[e._v("这六个参数分别代表正交投影照相机拍摄到的空间的六个面的位置，其为视景体（Frustum）。只有在视景体内部的物体才可能显示在屏幕上，而视景体外的物体 会在显示之前 被裁减掉。\n为了保持照相机的横竖比例，需要保持（right - left）和（top - bottom）的比例与Canvas 宽度和高度的比例一致。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var camera = new THREE.OrthographicCamera(-2, 2, 1.5, -1.5, 1, 1000);\ncamera.position.set(0, 0, 5);\nscene.add(camera);\n")])])]),t("p",[e._v("其中，第二句是设定照相机的位置。照相机默认都是沿 z 轴负方向观察的，可以通过 lookAt 函数指定它看着其他方向：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("camera.lookAt(new THREE.Vector3(0, 0, 0));\n")])])]),t("p",[e._v("这样就改变照相机观察方向由当前位置指向原点。注意， lookAt 函数接受的是一个 THREE.Vector3 的实例。")]),e._v(" "),t("h5",{attrs:{id:"透视投影相机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#透视投影相机"}},[e._v("#")]),e._v(" 透视投影相机")]),e._v(" "),t("p",[e._v("透视投影是更符合人眼视觉的投影，构造函数是：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("PerspectiveCamera( fov, aspect, near, far )\n")])])]),t("ul",[t("li",[t("p",[e._v("fov: 为视角的大小。如果设置为0,相当你闭上眼睛了,所以什么也看不到,如果为180,那么可以认为你的视界很广阔,但是在180度的时候，往往物体很小，因为他在你的整个可视区域中的比例变小了。")])]),e._v(" "),t("li",[t("p",[e._v("aspect: 为实际窗口的纵横比，即宽度除以高度。通常设为Canvas 的横纵比例。")])]),e._v(" "),t("li",[t("p",[e._v("near: 摄像机视锥体近端面")])]),e._v(" "),t("li",[t("p",[e._v("far: 摄像机视锥体远端面")])])]),e._v(" "),t("h4",{attrs:{id:"形状"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#形状"}},[e._v("#")]),e._v(" 形状")]),e._v(" "),t("p",[e._v("threejs封装了一些常见的几何形状，在使用时，就只需要定义threejs设定好需要的值即可，如果想要自定义形状，就需要手动创造顶点和面。")]),e._v(" "),t("h4",{attrs:{id:"立方体"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#立方体"}},[e._v("#")]),e._v(" 立方体")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("THREE.CubeGeometry(width, height, depth, widthSegments, heightSegments, depthSegments)\n")])])]),t("p",[e._v("这里，width 是x方向上的长度，height 是y方向上的长度，depth是z方向上的长度，后三个参数分别是三个方向上的分段数，如widthSegments 为3的话，代表x方向上水平分为三份。一般情况下不需要分段的话，可以不设置后三个参数，后三个参数的默认值为1。\n如："),t("code",[e._v("new THREE.CubeGEometry(1,2,3);")]),e._v(" 可以创建一个x方向 长度为1，y方向长度为2，z方向长度为3的立方体。")]),e._v(" "),t("p",[e._v("物体的几何中心默认在原点的位置。若设置了分段，会对六个面 进行分段，而不是对立方体进行分段，因此在立方体的中间是不分段的，只有六个侧面被分段。")]),e._v(" "),t("h4",{attrs:{id:"平面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#平面"}},[e._v("#")]),e._v(" 平面")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("THREE.PlanGeometry(width, height, widthSegments, heightSegments)\n")])])]),t("p",[e._v("width 是x方向上的长度，height 是y方向的长度， 后两个参数 同样 表示分段数。")]),e._v(" "),t("h4",{attrs:{id:"球体"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#球体"}},[e._v("#")]),e._v(" 球体")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("THREE.SphereGeometry(radius, segmentsWidth, segmentsHeight, phiStart, phiLength, thetaStart, thetaLength)\n")])])]),t("ul",[t("li",[e._v("radius 是半径")]),e._v(" "),t("li",[e._v("segmentsWidth 表示经度上的切片数")]),e._v(" "),t("li",[e._v("segmentsHeight 表示 纬度上的切片数")]),e._v(" "),t("li",[e._v("phiStart 表示 经度开始的弧度")]),e._v(" "),t("li",[e._v("phiLength 表示 经度跨过的弧度；")]),e._v(" "),t("li",[e._v("thetaStart 表示纬度开始的弧度")]),e._v(" "),t("li",[e._v("thetaLength 表示纬度跨国的弧度。\n使用 "),t("code",[e._v("var sphere = new THREE.SphereGeometry(3, 8, 6)")]),e._v(" 可以创建一个 半径为3， 经度划分为8份，纬度划分为6份的球体。")])]),e._v(" "),t("p",[e._v("segmentsWidth 相当于经度被切成了几瓣，而 segmentsHeight 相当于纬度被切成了几层。对于球\n体而言，当这两个值较大的时候，形成的多面体就可以近似看做是球体了。")]),e._v(" "),t("h4",{attrs:{id:"圆形"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#圆形"}},[e._v("#")]),e._v(" 圆形")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("THREE.CircleGemetry(radiusTop, radiusBottom, height, radiusSegments, heightSegments, openEnded)\n")])])]),t("p",[e._v("其中， radiusTop 与radiusBottom 分别是顶面与底面的半径，由此可知，当这两个 参数设置为不同的值时，实际上创建的是一个圆台，height是圆柱体的高度，radiusSegments 与hegithSegments 可类比球体中的分段，openEnded是一个布尔值，表示是否咩有顶点和底面，默认为false，表示有顶面和底面。")]),e._v(" "),t("h4",{attrs:{id:"圆环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#圆环"}},[e._v("#")]),e._v(" 圆环")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("THREE.TorusGemetry(radius, tube, radialSegments, tubularSegments, arc)\n")])])]),t("p",[e._v("其中， radius 是圆环半径；tube 是管道半径； radialSegments 与 tubularSegments 分\n别是两个分段数； arc 是圆环面的弧度，默认为 Math.PI * 2 。")]),e._v(" "),t("h3",{attrs:{id:"材质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#材质"}},[e._v("#")]),e._v(" 材质")]),e._v(" "),t("p",[e._v("材质（Material）是与渲染相关的属性")])])}),[],!1,null,null,null);a.default=r.exports}}]);