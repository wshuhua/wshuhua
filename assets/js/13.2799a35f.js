(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{466:function(t,s,v){"use strict";v.r(s);var _=v(28),a=Object(_.a)({},(function(){var t=this,s=t.$createElement,v=t._self._c||s;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"_1-html5更新特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-html5更新特性"}},[t._v("#")]),t._v(" 1. html5更新特性")]),t._v(" "),v("p",[t._v("HTML 5 ：2014年10月28日 HTML 5作为W3C推荐标准发布。")]),t._v(" "),v("h3",{attrs:{id:"_1-1-html5-vs-html4"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-html5-vs-html4"}},[t._v("#")]),t._v(" 1.1 "),v("a",{attrs:{href:"https://www.youtube.com/watch?v=9MzAzLHmaRs",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML5 vs HTML4:"),v("OutboundLink")],1)]),t._v(" "),v("ul",[v("li",[t._v("区别1：html5 不区分是否是严格模式还是传统模式，而html 声明时有严格、传统、框架模式。文档声明变得简单明了。")])]),t._v(" "),v("div",{staticClass:"language-html extra-class"},[v("pre",{pre:!0,attrs:{class:"language-html"}},[v("code",[t._v("html5: "),v("span",{pre:!0,attrs:{class:"token doctype"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),v("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("DOCTYPE")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token name"}},[t._v("html")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\nhtml 4.01 Strict："),v("span",{pre:!0,attrs:{class:"token doctype"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),v("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("DOCTYPE")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token name"}},[t._v("HTML")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token name"}},[t._v("PUBLIC")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-//W3C//DTD HTML 4.01//EN"')]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.w3.org/TR/html4/strict.dtd"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\nhtml 4.01 Transitional："),v("span",{pre:!0,attrs:{class:"token doctype"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),v("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("DOCTYPE")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token name"}},[t._v("HTML")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token name"}},[t._v("PUBLIC")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-//W3C//DTD HTML 4.01 Transitional//EN"')]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.w3.org/TR/html4/loose.dtd"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\nhtml 4.01 Framest："),v("span",{pre:!0,attrs:{class:"token doctype"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),v("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("DOCTYPE")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token name"}},[t._v("HTML")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token name"}},[t._v("PUBLIC")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-//W3C//DTD HTML 4.01 Frameset//EN"')]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.w3.org/TR/html4/frameset.dtd"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),v("ul",[v("li",[v("p",[t._v("区别2： html没有语义化标签，而html5 添加了许多语义标签，使代码结构清晰，提高代码可读性。\n如："),v("code",[t._v("header")]),t._v("、"),v("code",[t._v("nav")]),t._v("、"),v("code",[t._v("footer")]),t._v("、"),v("code",[t._v("main")]),t._v("、"),v("code",[t._v("artical")]),t._v("、"),v("code",[t._v("section")]),t._v("等。")])]),t._v(" "),v("li",[v("p",[t._v("区别3： html无法在网页上动态的绘制图片，而 html5 新增了"),v("code",[t._v("canvas")]),t._v("画布，"),v("code",[t._v("canvas")]),t._v("绘制的图片放大后会失真，而"),v("code",[t._v("SVG")]),t._v("可绘制矢量图形。")])])]),t._v(" "),v("h3",{attrs:{id:"_1-2-h5-新增特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-h5-新增特性"}},[t._v("#")]),t._v(" 1.2 H5 新增特性")]),t._v(" "),v("ol",[v("li",[t._v("Canvas、SVG -- 用于绘画的元素，canvas绘制的图片会失真而SVG绘制的不会失真。")]),t._v(" "),v("li",[t._v("video、audio -- 用于播放视频和音频的媒体。")]),t._v(" "),v("li",[t._v("Drag 、Drop -- 用于拖放的 。")]),t._v(" "),v("li",[t._v("Geolocation -- 用于获取地理位置。")]),t._v(" "),v("li",[t._v("localStorage、sessionStorage -- 用于本地离线存储。")]),t._v(" "),v("li",[t._v("webSQL、IndexDB -- 前端数据库操作，由于安全性极低，目前h5已放弃。")]),t._v(" "),v("li",[t._v("web Worker -- 独立于其他脚本，不影响页面性能运行在后台的javascript。")]),t._v(" "),v("li",[t._v("webSocket -- 单个TCP连接上进行全双工通讯的协议。")]),t._v(" "),v("li",[t._v("新的特殊内容元素 -- 如：article、footer、header、nav、section。")]),t._v(" "),v("li",[t._v("新的表单控件 -- 如：date、time、email、url、search。")])]),t._v(" "),v("h3",{attrs:{id:"_1-3-h5-的优缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-h5-的优缺点"}},[t._v("#")]),t._v(" 1.3 H5 的优缺点")]),t._v(" "),v("p",[t._v("概括html5有大致一下几点优势：")]),t._v(" "),v("ol",[v("li",[t._v("提高可用性和可维护性，改进了用户体验。")]),t._v(" "),v("li",[t._v("新增语义化标签，有助于开发人员定义清晰的结构。")]),t._v(" "),v("li",[t._v("可以播放视频音频，增加多媒体元素。")]),t._v(" "),v("li",[t._v("利用h5动画，友好地替代了flash和silverlight。")]),t._v(" "),v("li",[t._v("爬虫抓取网站的时候，对于SEO很友好。")]),t._v(" "),v("li",[t._v("H5被大量应用于移动应用和游戏开发。")]),t._v(" "),v("li",[t._v("可移植性好。")])]),t._v(" "),v("p",[t._v("缺点：\n现在大多数高版本浏览器都支持html5，但是少部分的低版本浏览器目前不支持html5，因新标签的引入，各浏览器之间将缺少一种统一的数据描述格式，造成用户体验不佳。")]),t._v(" "),v("h2",{attrs:{id:"_2-css3更新特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-css3更新特性"}},[t._v("#")]),t._v(" 2. css3更新特性")]),t._v(" "),v("p",[v("code",[t._v("CSS3")]),t._v(" 是 "),v("code",[t._v("CSS")]),t._v(" 规范的最新版本，在 "),v("code",[t._v("CSS2.1")]),t._v(" 的基础上增加了很多强大的新功能，以帮助开发人员解决一些实际面临的问题，并且不再需要非语义标签、复杂的 JavaScript 脚本以及图片。例如，CSS3 支持圆角、多背景、透明度、阴影、动画、图表等功能。")]),t._v(" "),v("h3",{attrs:{id:"_2-1-css1-vs-css2-vs-css3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-css1-vs-css2-vs-css3"}},[t._v("#")]),t._v(" 2.1 CSS1 vs CSS2 vs CSS3")]),t._v(" "),v("pre",[t._v("CSS1 和 CSS2.1 都是单一的规范\nCSS1 主要定义了网页对象的基本样式，如字体、颜色、背景、边框等\nCSS2 添加了高级概念，如浮动、定位、高级选择器（如子选择器、相邻选择器和通用选择器等）。\nCSS3: 在CSS2.1基础上增加了很多功能，例如：浮动、定位、高级选择器（如子选择器、相邻选择器和通用选择器等）。\n")]),t._v(" "),v("p",[t._v("比较典型的例如：\n"),v("strong",[t._v("\nw3c中 css2.1 中提出BFC和IFC\ncss3中提出：GFC（grid）和FFC(flex)\n")])]),t._v(" "),v("p",[v("a",{attrs:{href:"https://www.w3.org/Style/CSS/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSS最新消息"),v("OutboundLink")],1)]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("2022-05-07更新工作草案：选择器级别 4。\n2022-05-05更新了候选推荐草案：CSS 将更改级别 1。更新了候选推荐草案：CSS Text Level 3。更新了候选推荐草案：CSS 文本装饰 3 级。更新的工作草案：CSS 文本级别 4。\n2022-05-04更新工作草案：CSS 文本装饰 4 级。\n2022-04-28更新工作草案：CSS 颜色级别 4。更新的工作草案：CSS 颜色级别 5。\n2022-04-05更新建议：媒体查询 3 级。\n\n")])])]),v("h2",{attrs:{id:"_3-ecmascript-6更新特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-ecmascript-6更新特性"}},[t._v("#")]),t._v(" 3. "),v("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/intro#ES6-%E4%B8%8E-ECMAScript-2015-%E7%9A%84%E5%85%B3%E7%B3%BB",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript 6更新特性"),v("OutboundLink")],1)]),t._v(" "),v("p",[t._v("ES6")]),t._v(" "),v("p",[t._v("ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。")]),t._v(" "),v("h3",{attrs:{id:"_3-1-ecmascript-和-javascript-的关系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-ecmascript-和-javascript-的关系"}},[t._v("#")]),t._v(" 3.1 ECMAScript 和 JavaScript 的关系")]),t._v(" "),v("p",[v("code",[t._v("ECMAScript")]),t._v(" 和 "),v("code",[t._v("JavaScript")]),t._v(" 的关系是，前者是后者的规格，后者是前者的一种实现。")]),t._v(" "),v("h3",{attrs:{id:"_3-2-es6-与-ecmascript-2015-的关系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-es6-与-ecmascript-2015-的关系"}},[t._v("#")]),t._v(" 3.2 ES6 与 ECMAScript 2015 的关系")]),t._v(" "),v("p",[t._v("2011 年，"),v("code",[t._v("ECMAScript 5.1")]),t._v(" 版发布后，就开始制定 6.0 版了。因此，"),v("code",[t._v("ES6")]),t._v(" 这个词的原意，就是指 "),v("code",[t._v("JavaScript")]),t._v(" 语言的下一个版本。")]),t._v(" "),v("p",[v("code",[t._v("ES6")]),t._v(" 的第一个版本，就这样在 2015 年 6 月发布了，正式名称就是《ECMAScript 2015 标准》（简称 ES2015）。2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小（只新增了数组实例的includes方法和指数运算符），基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。")]),t._v(" "),v("p",[t._v("因此："),v("strong",[v("code",[t._v("ES6")]),t._v(" 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 "),v("code",[t._v("ES2015")]),t._v("、"),v("code",[t._v("ES2016")]),t._v("、"),v("code",[t._v("ES2017")]),t._v(" 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("p",[t._v("ES6更新的内容主要分为以下几点")]),t._v(" "),v("ol",[v("li",[t._v("表达式：声明、解构赋值")]),t._v(" "),v("li",[t._v("内置对象：字符串扩展、数值扩展、对象扩展、数组扩展、函数扩展、正则扩展、Symbol、Set、Map、Proxy、Reflect")]),t._v(" "),v("li",[t._v("语句与运算：Class、Module、Iterator")]),t._v(" "),v("li",[t._v("异步编程：Promise、Generator、Async")])])]),t._v(" "),v("h3",{attrs:{id:"_3-3-es2015"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-es2015"}},[t._v("#")]),t._v(" 3.3 ES2015")]),t._v(" "),v("ol",[v("li",[t._v("let/const声明")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("不允许重复声明")]),t._v(" "),v("li",[t._v("未定义就使用会报错：const命令和let命令不存在变量提升")]),t._v(" "),v("li",[t._v("暂时性死区：在代码块内使用const命令和let命令声明变量之前，该变量都不可用")])])]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[t._v("解构赋值")])]),t._v(" "),v("p",[t._v('比如：\n字符串解构：const [a, b, c, d, e] = "hello"')]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("匹配模式：只要等号两边的模式相同，左边的变量就会被赋予对应的值")]),t._v(" "),v("li",[t._v("解构赋值规则：只要等号右边的值不是对象或数组，就先将其转为对象")]),t._v(" "),v("li",[t._v("解构默认值生效条件：属性值严格等于undefined")]),t._v(" "),v("li",[t._v("解构遵循匹配模式")]),t._v(" "),v("li",[t._v("解构不成功时变量的值等于undefined")]),t._v(" "),v("li",[t._v("undefined和null无法转为对象，因此无法进行解构")])])]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[t._v("字符串扩展")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("Unicode表示法：大括号包含表示Unicode字符(\\u{0xXX}或\\u{0XXX})")]),t._v(" "),v("li",[t._v("字符串遍历：可通过for-of遍历字符串")]),t._v(" "),v("li",[t._v("字符串模板：可单行可多行可插入变量的增强版字符串")]),t._v(" "),v("li",[t._v("标签模板：函数参数的特殊调用")]),t._v(" "),v("li",[t._v("String.raw()：返回把字符串所有变量替换且对斜杠进行转义的结果")]),t._v(" "),v("li",[t._v("String.fromCodePoint()：返回码点对应字符")]),t._v(" "),v("li",[t._v("codePointAt()：返回字符对应码点(String.fromCodePoint()的逆操作)")]),t._v(" "),v("li",[t._v("normalize()：把字符的不同表示方法统一为同样形式，返回新字符串(Unicode正规化)")]),t._v(" "),v("li",[t._v("repeat()：把字符串重复n次，返回新字符串")]),t._v(" "),v("li",[t._v("matchAll()：返回正则表达式在字符串的所有匹配")]),t._v(" "),v("li",[t._v("includes()：是否存在指定字符串")]),t._v(" "),v("li",[t._v("startsWith()：是否存在字符串头部指定字符串")]),t._v(" "),v("li",[t._v("endsWith()：是否存在字符串尾部指定字符串")])])]),t._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[t._v("数值扩展")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("二进制表示法：0b或0B开头表示二进制(0bXX或0BXX)")]),t._v(" "),v("li",[t._v("八进制表示法：0o或0O开头表示二进制(0oXX或0OXX)")]),t._v(" "),v("li",[t._v("Number.EPSILON：数值最小精度")]),t._v(" "),v("li",[t._v("Number.MIN_SAFE_INTEGER：最小安全数值(-2^53)")]),t._v(" "),v("li",[t._v("Number.MAX_SAFE_INTEGER：最大安全数值(2^53)")]),t._v(" "),v("li",[t._v("Number.parseInt()：返回转换值的整数部分")]),t._v(" "),v("li",[t._v("Number.parseFloat()：返回转换值的浮点数部分")]),t._v(" "),v("li",[t._v("Number.isFinite()：是否为有限数值")]),t._v(" "),v("li",[t._v("Number.isNaN()：是否为NaN")]),t._v(" "),v("li",[t._v("Number.isInteger()：是否为整数")]),t._v(" "),v("li",[t._v("Number.isSafeInteger()：是否在数值安全范围内\n...")])])]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("对象扩展")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("简洁表示法：直接写入变量和函数作为对象的属性和方法({ prop, method() {} })")]),t._v(" "),v("li",[t._v("属性名表达式：字面量定义对象时使用[]定义键([prop]，不能与上同时使用)")]),t._v(" "),v("li",[t._v("方法的name属性：返回方法函数名")])]),t._v(" "),v("ul",[v("li",[t._v("取值函数(getter)和存值函数(setter)：get/set 函数名(属性的描述对象在get和set上)")]),t._v(" "),v("li",[t._v("bind返回的函数：bound 函数名")]),t._v(" "),v("li",[t._v("Function构造函数返回的函数实例：anonymous")])]),t._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[t._v("属性的可枚举性和遍历：描述对象的enumerable")]),t._v(" "),v("li",[t._v("super关键字：指向当前对象的原型对象(只能用在对象的简写方法中method() {})")]),t._v(" "),v("li",[t._v("Object.is()：对比两值是否相等")]),t._v(" "),v("li",[t._v("Object.assign()：合并对象(浅拷贝)，返回原对象")]),t._v(" "),v("li",[t._v("Object.getPrototypeOf()：返回对象的原型对象")]),t._v(" "),v("li",[t._v("Object.setPrototypeOf()：设置对象的原型对象")]),t._v(" "),v("li",[v("strong",[t._v("proto")]),t._v("：返回或设置对象的原型对象")])])]),t._v(" "),v("ol",{attrs:{start:"6"}},[v("li",[t._v("数组扩展")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("扩展运算符(...)：转换数组为用逗号分隔的参数序列([...arr]，相当于rest/spread参数的逆运算)")]),t._v(" "),v("li",[t._v("Array.from()：转换具有Iterator接口的数据结构为真正数组，返回新数组")])]),t._v(" "),v("ul",[v("li",[t._v("类数组对象：包含length的对象、Arguments对象、NodeList对象")]),t._v(" "),v("li",[t._v("可遍历对象：String、Set结构、Map结构、Generator函数")])]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[t._v("Array.of()：转换一组值为真正数组，返回新数组")]),t._v(" "),v("li",[t._v("copyWithin()：把指定位置的成员复制到其他位置，返回原数组")]),t._v(" "),v("li",[t._v("find()：返回第一个符合条件的成员")]),t._v(" "),v("li",[t._v("findIndex()：返回第一个符合条件的成员索引值")]),t._v(" "),v("li",[t._v("fill()：根据指定值填充整个数组，返回原数组")]),t._v(" "),v("li",[t._v("keys()：返回以索引值为遍历器的对象")]),t._v(" "),v("li",[t._v("values()：返回以属性值为遍历器的对象")]),t._v(" "),v("li",[t._v("entries()：返回以索引值和属性值为遍历器的对象")]),t._v(" "),v("li",[t._v("数组空位：ES6明确将数组空位转为undefined(空位处理规不一，建议避免出现)")])])]),t._v(" "),v("ol",{attrs:{start:"7"}},[v("li",[t._v("函数扩展")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("参数默认值：为函数参数指定默认值")]),t._v(" "),v("li",[t._v("rest/spread参数(...)：返回函数多余参数(作用：代替Arguments对象)")]),t._v(" "),v("li",[t._v("严格模式：在严格条件下运行JS")])]),t._v(" "),v("ul",[v("li",[t._v("应用：只要函数参数使用默认值、解构赋值、扩展运算符，那么函数内部就不能显式设定为严格模式")])]),t._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[t._v("name属性：返回函数的函数名")])]),t._v(" "),v("ul",[v("li",[t._v("将匿名函数赋值给变量：空字符串(ES5)、变量名(ES6)")])]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("箭头函数(=>)：函数简写")])]),t._v(" "),v("ul",[v("li",[t._v("this指向固定化: 并非因为内部有绑定this的机制，而是根本没有自己的this，导致内部的this就是外层代码块的this。 因为没有this，因此不能用作构造函数")])]),t._v(" "),v("ol",{attrs:{start:"6"}},[v("li",[t._v("尾调用优化：只保留内层函数的调用帧")])]),t._v(" "),v("ul",[v("li",[t._v("尾调用: 某个函数的最后一步是调用另一个函数(function f(x) { return g(x); })")]),t._v(" "),v("li",[t._v("尾递归: 函数尾调用自身,只要使用尾递归就不会发生栈溢出，相对节省内存,把所有用到的内部变量改写成函数的参数并使用参数默认值")])])]),t._v(" "),v("ol",{attrs:{start:"8"}},[v("li",[t._v("正则扩展")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("正则方法调用变更：字符串对象的match()、replace()、search()、split()内部调用转为调用RegExp实例对应的RegExp.prototype[Symbol.方法]\n...")])])]),t._v(" "),v("ol",{attrs:{start:"9"}},[v("li",[t._v("Symbol")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("定义：独一无二的值")]),t._v(" "),v("li",[t._v("声明：const set = Symbol(str)")]),t._v(" "),v("li",[t._v("入参：字符串(可选)")]),t._v(" "),v("li",[t._v("方法:")])]),t._v(" "),v("ul",[v("li",[t._v("Symbol()：创建以参数作为描述的Symbol值(不登记在全局环境)")]),t._v(" "),v("li",[t._v("Symbol.for()：创建以参数作为描述的Symbol值，如存在此参数则返回原有的Symbol值(先搜索后创建，登记在全局环境)")]),t._v(" "),v("li",[t._v("Symbol.keyFor()：返回已登记的Symbol值的描述(只能返回Symbol.for()的key)")]),t._v(" "),v("li",[t._v("Object.getOwnPropertySymbols()：返回对象中所有用作属性名的Symbol值的数组")])]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("内置")])]),t._v(" "),v("ul",[v("li",[t._v("Symbol.hasInstance：指向一个内部方法，当其他对象使用instanceof运算符判断是否为此对象的实例时会调用此方法")]),t._v(" "),v("li",[t._v("Symbol.isConcatSpreadable：指向一个布尔，定义对象用于Array.prototype.concat()时是否可展开")]),t._v(" "),v("li",[t._v("Symbol.species：指向一个构造函数，当实例对象使用自身构造函数时会调用指定的构造函数")]),t._v(" "),v("li",[t._v("Symbol.match：指向一个函数，当实例对象被String.prototype.match()调用时会重新定义match()的行为")]),t._v(" "),v("li",[t._v("Symbol.replace：指向一个函数，当实例对象被String.prototype.replace()调用时会重新定义replace()的行为")]),t._v(" "),v("li",[t._v("Symbol.search：指向一个函数，当实例对象被String.prototype.search()调用时会重新定义search()的行为")]),t._v(" "),v("li",[t._v("Symbol.split：指向一个函数，当实例对象被String.prototype.split()调用时会重新定义split()的行为")]),t._v(" "),v("li",[t._v("Symbol.iterator：指向一个默认遍历器方法，当实例对象执行for-of时会调用指定的默认遍历器")]),t._v(" "),v("li",[t._v("Symbol.toPrimitive：指向一个函数，当实例对象被转为原始类型的值时会返回此对象对应的原始类型值")]),t._v(" "),v("li",[t._v("Symbol.toStringTag：指向一个函数，当实例对象被Object.prototype.toString()调用时其返回值会出现在toString()返回的字符串之中表示对象的类型")]),t._v(" "),v("li",[t._v("Symbol.unscopables：指向一个对象，指定使用with时哪些属性会被with环境排除")])])]),t._v(" "),v("ol",{attrs:{start:"10"}},[v("li",[t._v("Set")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("定义：类似于数组的数据结构，成员值都是唯一且没有重复的值")]),t._v(" "),v("li",[t._v("声明：const set = new Set(arr)")]),t._v(" "),v("li",[t._v("入参：具有Iterator接口的数据结构")]),t._v(" "),v("li",[t._v("属性")])]),t._v(" "),v("ul",[v("li",[t._v("constructor：构造函数，返回Set")]),t._v(" "),v("li",[t._v("size：返回实例成员总数")])]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("方法")])]),t._v(" "),v("ul",[v("li",[t._v("add()：添加值，返回实例")]),t._v(" "),v("li",[t._v("delete()：删除值，返回布尔")]),t._v(" "),v("li",[t._v("has()：检查值，返回布尔")]),t._v(" "),v("li",[t._v("clear()：清除所有成员")]),t._v(" "),v("li",[t._v("keys()：返回以属性值为遍历器的对象")]),t._v(" "),v("li",[t._v("values()：返回以属性值为遍历器的对象")]),t._v(" "),v("li",[t._v("entries()：返回以属性值和属性值为遍历器的对象")]),t._v(" "),v("li",[t._v("forEach()：使用回调函数遍历每个成员")])])]),t._v(" "),v("ol",{attrs:{start:"11"}},[v("li",[t._v("WeakSet")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("定义：和Set结构类似，成员值只能是"),v("code",[t._v("对象")])]),t._v(" "),v("li",[t._v("声明：const set = new WeakSet(arr)")]),t._v(" "),v("li",[t._v("入参：具有Iterator接口的数据结构")]),t._v(" "),v("li",[t._v("属性")])]),t._v(" "),v("ul",[v("li",[t._v("constructor：构造函数，返回WeakSet")])]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("方法")])]),t._v(" "),v("ul",[v("li",[t._v("add()：添加值，返回实例")]),t._v(" "),v("li",[t._v("delete()：删除值，返回布尔")]),t._v(" "),v("li",[t._v("has()：检查值，返回布尔")])])]),t._v(" "),v("ol",{attrs:{start:"12"}},[v("li",[t._v("Map")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("定义：类似于对象的数据结构，成员键是任何类型的值")]),t._v(" "),v("li",[t._v("声明：const set = new Map(arr)")]),t._v(" "),v("li",[t._v("入参：具有Iterator接口且每个成员都是一个双元素数组的数据结构")]),t._v(" "),v("li",[t._v("属性")])]),t._v(" "),v("ul",[v("li",[t._v("constructor：构造函数，返回Map")]),t._v(" "),v("li",[t._v("size：返回实例成员总数")])]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("方法")])]),t._v(" "),v("ul",[v("li",[t._v("get()：返回键值对")]),t._v(" "),v("li",[t._v("set()：添加键值对，返回实例")]),t._v(" "),v("li",[t._v("delete()：删除键值对，返回布尔")]),t._v(" "),v("li",[t._v("has()：检查键值对，返回布尔")]),t._v(" "),v("li",[t._v("clear()：清除所有成员")]),t._v(" "),v("li",[t._v("keys()：返回以键为遍历器的对象")]),t._v(" "),v("li",[t._v("values()：返回以值为遍历器的对象")]),t._v(" "),v("li",[t._v("entries()：返回以键和值为遍历器的对象")]),t._v(" "),v("li",[t._v("forEach()：使用回调函数遍历每个成员")])])]),t._v(" "),v("ol",{attrs:{start:"13"}},[v("li",[t._v("WeakMap")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("定义：和Map结构类似，成员键只能是对象")]),t._v(" "),v("li",[t._v("声明：const set = new WeakMap(arr)")]),t._v(" "),v("li",[t._v("入参：具有Iterator接口且每个成员都是一个双元素数组的数据结构")]),t._v(" "),v("li",[t._v("属性")])]),t._v(" "),v("ul",[v("li",[t._v("constructor：构造函数，返回WeakMap")])]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("方法")])]),t._v(" "),v("ul",[v("li",[t._v("get()：返回键值对")]),t._v(" "),v("li",[t._v("set()：添加键值对，返回实例")]),t._v(" "),v("li",[t._v("delete()：删除键值对，返回布尔")]),t._v(" "),v("li",[t._v("has()：检查键值对，返回布尔")])])]),t._v(" "),v("ol",{attrs:{start:"14"}},[v("li",[t._v("Proxy")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("定义：修改某些操作的默认行为")]),t._v(" "),v("li",[t._v("声明：const proxy = new Proxy(target, handler)")]),t._v(" "),v("li",[t._v("入参")])]),t._v(" "),v("ul",[v("li",[t._v("target：拦截的目标对象")]),t._v(" "),v("li",[t._v("handler：定制拦截行为")])]),t._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[t._v("方法")])]),t._v(" "),v("ul",[v("li",[t._v("Proxy.revocable()：返回可取消的Proxy实例(返回{ proxy, revoke }，通过revoke()取消代理)")])]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("拦截方式")])]),t._v(" "),v("ul",[v("li",[t._v("get()：拦截对象属性读取")]),t._v(" "),v("li",[t._v("set()：拦截对象属性设置，返回布尔")]),t._v(" "),v("li",[t._v("has()：拦截对象属性检查k in obj，返回布尔")]),t._v(" "),v("li",[t._v("deleteProperty()：拦截对象属性删除delete obj[k]，返回布尔")]),t._v(" "),v("li",[t._v("defineProperty()：拦截对象属性定义Object.defineProperty()、Object.defineProperties()，返回布尔")]),t._v(" "),v("li",[t._v("ownKeys()：拦截对象属性遍历for-in、Object.keys()、Object.getOwnPropertyNames()、Object.getOwnPropertySymbols()，返回数组")]),t._v(" "),v("li",[t._v("getOwnPropertyDescriptor()：拦截对象属性描述读取Object.getOwnPropertyDescriptor()，返回对象")]),t._v(" "),v("li",[t._v("getPrototypeOf()：拦截对象原型读取instanceof、Object.getPrototypeOf()、Object.prototype."),v("strong",[t._v("proto")]),t._v("、Object.prototype.  + isPrototypeOf()、Reflect.getPrototypeOf()，返回对象")]),t._v(" "),v("li",[t._v("setPrototypeOf()：拦截对象原型设置Object.setPrototypeOf()，返回布尔")]),t._v(" "),v("li",[t._v("isExtensible()：拦截对象是否可扩展读取Object.isExtensible()，返回布尔")]),t._v(" "),v("li",[t._v("preventExtensions()：拦截对象不可扩展设置Object.preventExtensions()，返回布尔")]),t._v(" "),v("li",[t._v("apply()：拦截Proxy实例作为函数调用proxy()、proxy.apply()、proxy.call()")]),t._v(" "),v("li",[t._v("construct()：拦截Proxy实例作为构造函数调用new proxy()")])])]),t._v(" "),v("ol",{attrs:{start:"15"}},[v("li",[t._v("Reflect")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("定义：保持Object方法的默认行为")]),t._v(" "),v("li",[t._v("方法")])]),t._v(" "),v("ul",[v("li",[t._v("get()：返回对象属性")]),t._v(" "),v("li",[t._v("set()：设置对象属性，返回布尔")]),t._v(" "),v("li",[t._v("has()：检查对象属性，返回布尔")]),t._v(" "),v("li",[t._v("deleteProperty()：删除对象属性，返回布尔")]),t._v(" "),v("li",[t._v("defineProperty()：定义对象属性，返回布尔")]),t._v(" "),v("li",[t._v("ownKeys()：遍历对象属性，返回数组(Object.getOwnPropertyNames()+Object.getOwnPropertySymbols())")]),t._v(" "),v("li",[t._v("getOwnPropertyDescriptor()：返回对象属性描述，返回对象")]),t._v(" "),v("li",[t._v("getPrototypeOf()：返回对象原型，返回对象")]),t._v(" "),v("li",[t._v("setPrototypeOf()：设置对象原型，返回布尔")]),t._v(" "),v("li",[t._v("isExtensible()：返回对象是否可扩展，返回布尔")]),t._v(" "),v("li",[t._v("preventExtensions()：设置对象不可扩展，返回布尔")]),t._v(" "),v("li",[t._v("apply()：绑定this后执行指定函数")]),t._v(" "),v("li",[t._v("construct()：调用构造函数创建实例")])]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[v("p",[t._v("Proxy方法和Reflect方法一一对应")])]),t._v(" "),v("li",[v("p",[t._v("Proxy和Reflect联合使用，前者负责拦截赋值操作，后者负责完成赋值操作")])]),t._v(" "),v("li",[v("p",[t._v("数据绑定：观察者模式")])])]),t._v(" "),v("div",{staticClass:"language-js extra-class"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" observerQueue "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("observe")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fn")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" observerQueue"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("observable")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tgt"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receiver"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Reflect"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tgt"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" receiver"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        observerQueue"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("v")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("v")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" person "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("observable")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Yajun"')]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("print")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token template-string"}},[v("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),v("span",{pre:!0,attrs:{class:"token interpolation"}},[v("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("person"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),v("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v(" is ")]),v("span",{pre:!0,attrs:{class:"token interpolation"}},[v("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("person"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age"),v("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v(" years old")]),v("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("print"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nperson"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Joway"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),v("ol",{attrs:{start:"16"}},[v("li",[t._v("Class")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("定义：对一类具有共同特征的事物的抽象(构造函数语法糖)")]),t._v(" "),v("li",[t._v("原理：类本身指向构造函数，所有方法定义在prototype上，可看作构造函数的另一种写法(Class === Class.prototype.constructor)")]),t._v(" "),v("li",[t._v("方法和关键字")])]),t._v(" "),v("ul",[v("li",[t._v("constructor()：构造函数，new命令生成实例时自动调用")]),t._v(" "),v("li",[t._v("extends：继承父类")]),t._v(" "),v("li",[t._v("super：新建父类的this")]),t._v(" "),v("li",[t._v("static：定义静态属性方法")]),t._v(" "),v("li",[t._v("get：取值函数，拦截属性的取值行为")]),t._v(" "),v("li",[t._v("set：存值函数，拦截属性的存值行为")])]),t._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[t._v("属性")])]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("proto")]),t._v("：构造函数的继承(总是指向父类)")]),t._v(" "),v("li",[v("strong",[t._v("proto")]),t._v("."),v("strong",[t._v("proto")]),t._v("：子类的原型的原型，即父类的原型(总是指向父类的__proto__)")]),t._v(" "),v("li",[t._v("prototype."),v("strong",[t._v("proto")]),t._v("：属性方法的继承(总是指向父类的prototype)")])])]),t._v(" "),v("ol",{attrs:{start:"17"}},[v("li",[t._v("Module")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("命令")])]),t._v(" "),v("ul",[v("li",[t._v("export：规定模块对外接口\n"),v("ul",[v("li",[t._v("默认导出：export default Person(导入时可指定模块任意名称，无需知晓内部真实名称)")]),t._v(" "),v("li",[t._v('单独导出：export const name = "Bruce"')]),t._v(" "),v("li",[t._v("按需导出：export { age, name, sex }(推荐)")]),t._v(" "),v("li",[t._v("改名导出：export { name as newName }")])])]),t._v(" "),v("li",[t._v("import：导入模块内部功能\n"),v("ul",[v("li",[t._v('默认导入：import Person from "person"')]),t._v(" "),v("li",[t._v('整体导入：import * as Person from "person"')]),t._v(" "),v("li",[t._v('按需导入：import { age, name, sex } from "person"')]),t._v(" "),v("li",[t._v('改名导入：import { name as newName } from "person"')]),t._v(" "),v("li",[t._v('自执导入：import "person"')]),t._v(" "),v("li",[t._v('复合导入：import Person, { name } from "person"')])])]),t._v(" "),v("li",[t._v("复合模式：export命令和import命令结合在一起写成一行，变量实质没有被导入当前模块，相当于对外转发接口，导致当前模块无法直接使用其导入变量\n"),v("ul",[v("li",[t._v('默认导入导出：export { default } from "person"')]),t._v(" "),v("li",[t._v('整体导入导出：export * from "person"')]),t._v(" "),v("li",[t._v('按需导入导出：export { age, name, sex } from "person"')]),t._v(" "),v("li",[t._v('改名导入导出：export { name as newName } from "person"')]),t._v(" "),v("li",[t._v('具名改默认导入导出：export { name as default } from "person"')]),t._v(" "),v("li",[t._v('默认改具名导入导出：export { default as name } from "person"')])])])]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[t._v("继承：默认导出和改名导出结合使用可使模块具备继承性")]),t._v(" "),v("li",[t._v("设计思想：尽量地静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量")]),t._v(" "),v("li",[t._v("严格模式：ES6模块自动采用严格模式(不管模块头部是否添加use strict)")])]),t._v(" "),v("p",[t._v("CommonJS：用于服务器(动态化依赖)\nAMD：用于浏览器(动态化依赖)\nCMD：用于浏览器(动态化依赖)\nUMD：用于浏览器和服务器(动态化依赖)\nESM：用于浏览器和服务器(静态化依赖)")]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("加载方式")])]),t._v(" "),v("ul",[v("li",[t._v("运行时加载\n"),v("ul",[v("li",[t._v("定义：整体加载模块生成一个对象，再从对象上获取需要的属性和方法进行加载(全部加载)")]),t._v(" "),v("li",[t._v("影响：只有运行时才能得到这个对象，导致无法在编译时做静态优化")])])]),t._v(" "),v("li",[t._v("编译时加载\n"),v("ul",[v("li",[t._v("定义：直接从模块中获取需要的属性和方法进行加载(按需加载)")]),t._v(" "),v("li",[t._v("影响：在编译时就完成模块加载，效率比其他方案高，但无法引用模块本身(本身不是对象)，可拓展JS高级语法(宏和类型校验)")])])])])]),t._v(" "),v("ol",{attrs:{start:"18"}},[v("li",[t._v("Iterator")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("定义：为各种不同的数据结构提供统一的访问机制")]),t._v(" "),v("li",[t._v("原理：创建一个指针指向首个成员，按照次序使用next()指向下一个成员，直接到结束位置(数据结构只要部署Iterator接口就可完成遍历操作)")]),t._v(" "),v("li",[t._v("作用")])]),t._v(" "),v("ul",[v("li",[t._v("为各种数据结构提供一个统一的简便的访问接口")]),t._v(" "),v("li",[t._v("使得数据结构成员能够按某种次序排列")]),t._v(" "),v("li",[t._v("ES6创造了新的遍历命令for-of，Iterator接口主要供for-of消费")])]),t._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[t._v("形式：for-of(自动去寻找Iterator接口)")]),t._v(" "),v("li",[t._v("数据结构")])]),t._v(" "),v("ul",[v("li",[t._v("集合：Array、Object、Set、Map")]),t._v(" "),v("li",[t._v("原生具备接口的数据结构：String、Array、Set、Map、TypedArray、Arguments、NodeList")])]),t._v(" "),v("ol",{attrs:{start:"6"}},[v("li",[t._v("部署：默认部署在Symbol.iterator(具备此属性被认为可遍历的iterable)\n遍历器对象")])]),t._v(" "),v("ul",[v("li",[t._v("next()：下一步操作，返回{ done, value }(必须部署)")]),t._v(" "),v("li",[t._v("return()：for-of提前退出调用，返回{ done: true }")]),t._v(" "),v("li",[t._v("throw()：不使用，配合Generator函数使用")])])]),t._v(" "),v("ol",{attrs:{start:"19"}},[v("li",[t._v("Promise")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("p",[t._v("new Promise\nthen()\ncatch()\nPromise.all()\nPromise.race()\nPromise.resolve()\nPromise.reject()")])]),t._v(" "),v("ol",{attrs:{start:"20"}},[v("li",[t._v("Generator\n:::\n"),v("em",[t._v("命令\nyidle命令\nyidle")]),t._v("命令\nnext()\nreturn()\nthrow()\n:::")])]),t._v(" "),v("h3",{attrs:{id:"_3-4-es2016"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-es2016"}},[t._v("#")]),t._v(" 3.4 ES2016")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("数值扩展 指数运算符(**)：数值求幂(相当于Math.pow())")])]),t._v(" "),v("li",[v("p",[t._v("数组扩展 includes()：是否存在指定成员")])])]),t._v(" "),v("h3",{attrs:{id:"_3-5-es2017"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-es2017"}},[t._v("#")]),t._v(" 3.5 ES2017")]),t._v(" "),v("ol",[v("li",[t._v("声明")])]),t._v(" "),v("ul",[v("li",[t._v("共享内存和原子操作：由全局对象SharedArrayBuffer和Atomics实现，将数据存储在一块共享内存空间中，这些数据可在JS主线程和web-worker线程之间共享")])]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[t._v("字符串扩展:")])]),t._v(" "),v("ul",[v("li",[t._v("padStart()：把指定字符串填充到字符串头部，返回新字符串")]),t._v(" "),v("li",[t._v("padEnd()：把指定字符串填充到字符串尾部，返回新字符串")])]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[t._v("对象扩展")])]),t._v(" "),v("ul",[v("li",[t._v("Object.getOwnPropertyDescriptors()：返回对象所有自身属性(非继承属性)的描述对象")]),t._v(" "),v("li",[t._v("Object.values()：返回以值组成的数组")]),t._v(" "),v("li",[t._v("Object.entries()：返回以键和值组成的数组")])]),t._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[t._v("函数扩展")])]),t._v(" "),v("ul",[v("li",[t._v("函数参数尾逗号：允许函数最后一个参数有尾逗号")])]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("Async:")])]),t._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),v("ol",[v("li",[t._v("定义：使异步函数以同步函数的形式书写(Generator函数语法糖)")]),t._v(" "),v("li",[t._v("原理：将Generator函数和自动执行器spawn包装在一个函数里")]),t._v(" "),v("li",[t._v("形式：将Generator函数的*替换成async，将yield替换成await")]),t._v(" "),v("li",[t._v("声明")])]),t._v(" "),v("ul",[v("li",[t._v("具名函数：async function Func() {}")]),t._v(" "),v("li",[t._v("函数表达式：const func = async function() {}")]),t._v(" "),v("li",[t._v("箭头函数：const func = async() => {}")]),t._v(" "),v("li",[t._v("对象方法：const obj = { async func() {} }")]),t._v(" "),v("li",[t._v("类方法：class Cla { async Func() {} }")])]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("await命令：等待当前Promise对象状态变更完毕\n正常情况：后面是Promise对象则返回其结果，否则返回对应的值\n后随Thenable对象：将其等同于Promise对象返回其结果")])]),t._v(" "),v("p",[t._v("错误处理：将await命令Promise对象放到try-catch中(可放多个)")])]),t._v(" "),v("h3",{attrs:{id:"_3-6-es2018"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-es2018"}},[t._v("#")]),t._v(" 3.6 ES2018")]),t._v(" "),v("ol",[v("li",[t._v("字符串扩展: 放松对标签模板里字符串转义的限制")]),t._v(" "),v("li",[t._v("对象扩展: 扩展运算符(...)：转换对象为用逗号分隔的参数序列({ ...obj }，相当于rest/spread参数的逆运算)")]),t._v(" "),v("li",[t._v("Promise: finally()：指定不管最后状态如何都会执行的回调函数")]),t._v(" "),v("li",[t._v("Async: 异步迭代器(for-await-of)：循环等待每个Promise对象变为resolved状态才进入下一步")])]),t._v(" "),v("h3",{attrs:{id:"_3-7-es2019"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-es2019"}},[t._v("#")]),t._v(" 3.7 ES2019")]),t._v(" "),v("ol",[v("li",[t._v("字符串扩展:")])]),t._v(" "),v("ul",[v("li",[t._v("直接输入U+2028和U+2029：字符串可直接输入行分隔符和段分隔符")]),t._v(" "),v("li",[t._v("JSON.stringify()改造：可返回不符合UTF-8标准的字符串")]),t._v(" "),v("li",[t._v("trimStart()：消除字符串头部空格，返回新字符串")]),t._v(" "),v("li",[t._v("trimEnd()：消除字符串尾部空格，返回新字符串")])]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[t._v("对象扩展")])]),t._v(" "),v("ul",[v("li",[t._v("Object.fromEntries()：返回以键和值组成的对象(Object.entries()的逆操作)")])]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[t._v("数组扩展")])]),t._v(" "),v("ul",[v("li",[t._v("sort()稳定性：排序关键字相同的项目其排序前后的顺序不变，默认为稳定")]),t._v(" "),v("li",[t._v("flat()：扁平化数组，返回新数组")]),t._v(" "),v("li",[t._v("flatMap()：映射且扁平化数组，返回新数组(只能展开一层数组)")])]),t._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[t._v("函数扩展：")])]),t._v(" "),v("ul",[v("li",[t._v("toString()改造：返回函数原始代码(与编码一致)")]),t._v(" "),v("li",[t._v("catch()参数可省略：catch()中的参数可省略")])]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("Symbol")])]),t._v(" "),v("ul",[v("li",[t._v("description：返回Symbol值的描述")])]),t._v(" "),v("h3",{attrs:{id:"_3-8-es2020"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-es2020"}},[t._v("#")]),t._v(" 3.8 ES2020")]),t._v(" "),v("ol",[v("li",[t._v("声明")])]),t._v(" "),v("ul",[v("li",[t._v("globalThis：作为顶层对象，指向全局环境下的this")]),t._v(" "),v("li",[t._v("Browser：顶层对象是window")]),t._v(" "),v("li",[t._v("Node：顶层对象是global")]),t._v(" "),v("li",[t._v("WebWorker：顶层对象是self")]),t._v(" "),v("li",[t._v("以上三者：通用顶层对象是globalThis")])]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[t._v("数值扩展： BigInt（任何位数的整数(新增的数据类型，使用n结尾)）")]),t._v(" "),v("li",[t._v("对象扩展：")])]),t._v(" "),v("ul",[v("li",[t._v("链判断操作符(?.)：是否存在对象属性(不存在返回undefined且不再往下执行)\n"),v("ul",[v("li",[t._v("对象属性：obj?.prop、obj?.[expr]")]),t._v(" "),v("li",[t._v("函数调用：func?.(...args)")])])]),t._v(" "),v("li",[t._v("空判断操作符(??)：是否值为undefined或null，是则使用默认值")])]),t._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[t._v("正则扩展")])]),t._v(" "),v("ul",[v("li",[t._v("matchAll()：返回所有匹配的遍历器")])]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("Module")])]),t._v(" "),v("ul",[v("li",[t._v("import()：动态导入(返回Promise)\n"),v("ul",[v("li",[t._v("背景：import命令被JS引擎静态分析，先于模块内的其他语句执行，无法取代require()的动态加载功能，提案建议引入import()来代替require()")]),t._v(" "),v("li",[t._v("位置：可在任何地方使用")]),t._v(" "),v("li",[t._v("区别：require()是同步加载，import()是异步加载")]),t._v(" "),v("li",[t._v("场景：按需加载、条件加载、模块路径动态化")])])])]),t._v(" "),v("ol",{attrs:{start:"6"}},[v("li",[t._v("Iterator：for-in遍历顺序：不同的引擎已就如何迭代属性达成一致，从而使行为标准化")]),t._v(" "),v("li",[t._v("Promise:")])]),t._v(" "),v("ul",[v("li",[t._v("Promise.allSettled()：将多个实例包装成一个新实例，返回全部实例状态变更后的状态数组(齐变更再返回)\n"),v("ul",[v("li",[t._v("入参：具有Iterator接口的数据结构")]),t._v(" "),v("li",[t._v("成功：成员包含status和value，status为fulfilled，value为返回值")]),t._v(" "),v("li",[t._v("失败：成员包含status和reason，status为rejected，value为错误原因")])])])]),t._v(" "),v("h3",{attrs:{id:"_3-9-es提案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-es提案"}},[t._v("#")]),t._v(" 3.9 ES提案")]),t._v(" "),v("ol",[v("li",[t._v("声明:")])]),t._v(" "),v("ul",[v("li",[t._v("do表达式：封装块级作用域的操作，返回内部最后执行表达式的值(do{})")]),t._v(" "),v("li",[t._v("throw表达式：直接使用throw new Error()，无需()或{}包括")]),t._v(" "),v("li",[t._v("!#命令：指定脚本执行器(写在文件首行)")])]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[t._v("数值扩展")])]),t._v(" "),v("ul",[v("li",[t._v("数值分隔符(_)：使用_作为千分位分隔符(增加数值的可读性)")]),t._v(" "),v("li",[t._v("Math.signbit()：返回数值符号是否设置")])]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[t._v("函数扩展")])]),t._v(" "),v("ul",[v("li",[t._v("函数部分执行：复用函数功能(?表示单个参数占位符，...表示多个参数占位符)")]),t._v(" "),v("li",[t._v("管道操作符(|>)：把左边表达式的值传入右边的函数进行求值(f(x) => x |> f)")]),t._v(" "),v("li",[t._v("绑定运算符(:😃：函数绑定(左边是对象右边是函数，取代bind、apply、call调用)\n"),v("ul",[v("li",[t._v("bind：bar.bind(foo) => foo::bar")]),t._v(" "),v("li",[t._v("apply：bar.apply(foo, arguments) => foo::bar(...arguments)")])])])]),t._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[t._v("Realm")])]),t._v(" "),v("ul",[v("li",[t._v("定义：提供沙箱功能，允许隔离代码，防止被隔离的代码拿到全局对象")]),t._v(" "),v("li",[t._v("声明：new Realm().global")])]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("Class")])]),t._v(" "),v("ul",[v("li",[t._v("静态属性：使用"),v("code",[t._v("static")]),t._v("定义属性，该属性不会被实例继承，只能通过类来调用")]),t._v(" "),v("li",[t._v("私有属性：使用"),v("code",[t._v("#")]),t._v("定义属性，该属性只能在类内部访问")]),t._v(" "),v("li",[t._v("私有方法：使用"),v("code",[t._v("#")]),t._v("定义方法，该方法只能在类内部访问")]),t._v(" "),v("li",[t._v("装饰器：使用"),v("code",[t._v("@")]),t._v("注释或修改类和类方法")])]),t._v(" "),v("ol",{attrs:{start:"6"}},[v("li",[t._v("Module")])]),t._v(" "),v("ul",[v("li",[t._v("import.meta：返回脚本元信息")])]),t._v(" "),v("ol",{attrs:{start:"7"}},[v("li",[t._v("Promise")])]),t._v(" "),v("ul",[v("li",[t._v("Promise.any()：将多个实例包装成一个新实例，返回全部实例状态变更后的结果数组(齐变更再返回)\n"),v("ul",[v("li",[t._v("入参：具有Iterator接口的数据结构")]),t._v(" "),v("li",[t._v("成功：其中一个实例状态变成fulfilled，最终状态就会变成fulfilled")]),t._v(" "),v("li",[t._v("失败：只有全部实例状态变成rejected，最终状态才会变成rejected")])])]),t._v(" "),v("li",[t._v("Promise.try()：不想区分是否同步异步函数，包装函数为实例，使用then()指定下一步流程，使用catch()捕获错误")])]),t._v(" "),v("ol",{attrs:{start:"8"}},[v("li",[t._v("Async")])]),t._v(" "),v("ul",[v("li",[t._v("顶层Await：允许在模块的顶层独立使用await命令(借用await解决模块异步加载的问题)")])]),t._v(" "),v("p",[v("a",{attrs:{href:"https://juejin.cn/post/6844903959283367950#heading-54",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考"),v("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=a.exports}}]);