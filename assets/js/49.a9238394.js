(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{502:function(t,s,a){"use strict";a.r(s);var v=a(28),e=Object(v.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-宏观视角下的浏览器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-宏观视角下的浏览器"}},[t._v("#")]),t._v(" 1. 宏观视角下的浏览器")]),t._v(" "),a("h3",{attrs:{id:"_1-1-chrome架构演变史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-chrome架构演变史"}},[t._v("#")]),t._v(" 1.1 Chrome架构演变史")]),t._v(" "),a("h4",{attrs:{id:"单进程浏览器时代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单进程浏览器时代"}},[t._v("#")]),t._v(" 单进程浏览器时代：")]),t._v(" "),a("p",[t._v("单进程浏览器是指浏览器的所有功能模块都是运行在同一个进程里，这些模块包含了网络、插件、JavaScript 运行环境、渲染引擎和页面等")]),t._v(" "),a("p",[t._v("如此多的功能模块运行在一个进程里，导致单进程浏览器不稳定、不流畅和不安全的一个主要因素。")]),t._v(" "),a("ul",[a("li",[t._v("不稳定")])]),t._v(" "),a("p",[t._v("早期浏览器需要借助于插件来实现诸如 Web 视频、Web 游戏等各种强大的功能，但是插件是最容易出问题的模块，并且还运行在浏览器进程之中，所以一个插件的意外崩溃会引起整个浏览器的崩溃。")]),t._v(" "),a("p",[t._v("除了插件之外，渲染引擎模块也是不稳定的，通常一些复杂的 JavaScript 代码就有可能引起渲染引擎模块的崩溃。和插件一样，渲染引擎的崩溃也会导致整个浏览器的崩溃。")]),t._v(" "),a("ul",[a("li",[t._v("不流畅")])]),t._v(" "),a("p",[t._v("所有页面的渲染模块、JavaScript 执行环境以及插件都是运行在同一个线程中的，这就意味着同一时刻只能有一个模块可以执行。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("freeze")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"freeze"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("freeze")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("如果让这个脚本运行在一个单进程浏览器的页面里 会导致什么？")]),t._v(" "),a("p",[t._v("因为浏览器中所有的页面都运行在该线程中，所以这些页面都没有机会去执行任务，这样就会导致整个浏览器失去响应，变卡顿。")]),t._v(" "),a("p",[t._v("除了上述脚本或者插件会让单进程浏览器变卡顿外，页面的内存泄漏也是单进程变慢的一个重要原因。通常浏览器的内核都是非常复杂的，运行一个复杂点的页面再关闭页面，会存在内存不能完全回收的情况，这样导致的问题是使用时间越长，内存占用越高，浏览器会变得越慢。")]),t._v(" "),a("ul",[a("li",[t._v("不安全")])]),t._v(" "),a("p",[t._v("插件可以使用 C/C++ 等代码编写，通过插件可以获取到操作系统的任意资源，当你在页面运行一个插件时也就意味着这个插件能完全操作你的电脑。如果是个恶意插件，那么它就可以释放病毒、窃取你的账号密码，引发安全性问题。至于页面脚本，它可以通过浏览器的漏洞来获取系统权限，这些脚本获取系统权限之后也可以对你的电脑做一些恶意的事情，同样也会引发安全问题。")]),t._v(" "),a("h4",{attrs:{id:"多进程浏览器时代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多进程浏览器时代"}},[t._v("#")]),t._v(" 多进程浏览器时代")]),t._v(" "),a("p",[t._v("早期多进程架构：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/js/chrome1.png",alt:""}})]),t._v(" "),a("p",[t._v("Chrome早期多进程架构，由插件进程、渲染进程和主进程组成，进程之间由 IPC进行通信")]),t._v(" "),a("ul",[a("li",[t._v("由于进程是相互隔离的，所以当一个页面或者插件崩溃时，影响到的仅仅是当前的页面进程或者插件进程，并不会影响到浏览器和其他页面，这就解决了页面或者插件的崩溃会导致整个浏览器崩溃。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("多进程架构也会出现一个页面崩溃影响到其他页面的情况")]),t._v(" "),a("p",[t._v('通常情况下是一个页面使用一个进程，但是，有一种情况，叫"同一站点(same-site)"。')]),t._v(" "),a("p",[t._v("具体地讲，我们将“同一站点”定义为根域名（例如，geekbang.org）加上协议（例如，https:// 或者http://），还包含了该根域名下的所有子域名和不同的端口，比如下面这三个：")]),t._v(" "),a("ul",[a("li",[t._v("https://time.geekbang.org")]),t._v(" "),a("li",[t._v("https://www.geekbang.org")]),t._v(" "),a("li",[t._v("https://www.geekbang.org:8080")])]),t._v(" "),a("p",[t._v("都是属于同一站点，因为它们的协议都是https，而根域名也都是geekbang.org。")]),t._v(" "),a("p",[t._v("Chrome的默认策略是：每个标签对应一个渲染进程。但是如果从一个页面打开了新页面，而新页面和当前页面属于同一站点时，那么新页面会复用父页面的渲染进程。官方把这个默认策略叫"),a("code",[t._v("process-per-site-instance")]),t._v("。 直白的讲，就是如果几个页面符合同一站点，那么他们将被分配到一个渲染进程里面去。 所以，这种情况下，一个页面崩溃了，会导致同一站点的页面同时崩溃，因为他们使用了同一个渲染进程。 为什么要让他们跑在一个进程里面呢？ 因为在一个渲染进程里面，他们就会共享JS的执行环境，也就是说A页面可以直接在B页面中执行脚本。因为是同一家的站点，所以是有这个需求的。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("同一站点和同源策略区别")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("内存泄漏的解决方法: 因为当关闭一个页面时，整个渲染进程也会被关闭，之后该进程所占用的内存都会被系统回收，这样就轻松解决了浏览器页面的内存泄漏问题。")])]),t._v(" "),a("li",[a("p",[t._v("安全问题解决：使用安全沙箱。可以把沙箱看成是操作系统给进程上了一把锁，沙箱里面的程序可以运行，但是不能在你的硬盘上写入任何数据，也不能在敏感位置读取任何数据，例如你的文档和桌面。Chrome 把插件进程和渲染进程锁在沙箱里面，这样即使在渲染进程或者插件进程里面执行了恶意程序，恶意程序也无法突破沙箱去获取系统权限。")])])]),t._v(" "),a("h4",{attrs:{id:"目前多进程架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目前多进程架构"}},[t._v("#")]),t._v(" 目前多进程架构")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/js/chrome2.png",alt:""}})]),t._v(" "),a("p",[t._v("最新的 Chrome 浏览器包括：1 个浏览器（Browser）主进程、1 个 GPU 进程、1 个网络（NetWork）进程、多个渲染进程和多个插件进程。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("浏览器主进程：主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。")])]),t._v(" "),a("li",[a("p",[t._v("渲染进程：核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，"),a("code",[t._v("排版引擎 Blink")]),t._v(" 和 "),a("code",[t._v("JavaScript 引擎 V8")]),t._v(" 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。")])]),t._v(" "),a("li",[a("p",[t._v("GPU进程：Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。")])]),t._v(" "),a("li",[a("p",[t._v("网络进程：主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。")])]),t._v(" "),a("li",[a("p",[t._v("插件进程：主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")])])]),t._v(" "),a("h4",{attrs:{id:"优点-缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-缺点"}},[t._v("#")]),t._v(" 优点/缺点")]),t._v(" "),a("p",[t._v("多进程模型提升了浏览器的稳定性、流畅性和安全性，但同样不可避免地带来了一些问题：")]),t._v(" "),a("ul",[a("li",[t._v("更高的资源占用。因为每个进程都会包含公共基础结构的副本（如 JavaScript 运行环境），这就意味着浏览器会消耗更多的内存资源。")]),t._v(" "),a("li",[t._v("更复杂的体系架构。浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求了。")])]),t._v(" "),a("p",[t._v("对于上面这两个问题，Chrome 团队一直在寻求一种弹性方案，既可以解决资源占用高的问题，也可以解决复杂的体系架构的问题。")]),t._v(" "),a("h4",{attrs:{id:"未来面向服务的架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#未来面向服务的架构"}},[t._v("#")]),t._v(" 未来面向服务的架构")]),t._v(" "),a("p",[t._v("为了解决这些问题，在 2016 年，Chrome 官方团队使用“面向服务的架构”（Services Oriented Architecture，简称 SOA）的思想设计了新的 Chrome 架构。也就是说 Chrome 整体架构会朝向现代操作系统所采用的“面向服务的架构” 方向发展，原来的各种模块会被重构成独立的服务（Service），每个服务（Service）都可以在独立的进程中运行，访问服务（Service）必须使用定义好的接口，通过 IPC 来通信，从而构建一个更内聚、松耦合、易于维护和扩展的系统，更好实现 Chrome 简单、稳定、高速、安全的目标。")]),t._v(" "),a("p",[t._v("通俗来说就是以前是每个页面需要若干进程完成各自的工作，现在是将各个页面通用的功能（视频、网络、渲染等）发布为系统服务，页面在需要的时候与相应的服务通信完成需要的功能。这起码把进程间的耦合从页面中分离出去了。")]),t._v(" "),a("p",[t._v("Chrome 最终要把 UI、数据库、文件、设备、网络等模块重构为基础服务，类似操作系统底层服务")]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/js/chrome3.png",alt:""}})]),t._v(" "),a("p",[t._v("Chrome 还提供灵活的弹性架构，在强大性能设备上会以多进程的方式运行基础服务，但是如果在资源受限的设备上（如下图），Chrome 会将很多服务整合到一个进程中，从而节省内存占用。")]),t._v(" "),a("ul",[a("li",[t._v("在资源不足的设备上，将服务合并到浏览器进程中")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/images/js/chrome4.png",alt:""}})]),t._v(" "),a("p",[t._v("早期浏览器：\n不稳定（单独进程）\n不流畅（单独进程）\n不安全（沙箱）")]),t._v(" "),a("p",[t._v("早期多进程架构：\n主进程 渲染进程 插件进程")]),t._v(" "),a("p",[t._v("现代多进程架构：\n主进程 渲染进程 插件进程 GPU进程 网络进程")]),t._v(" "),a("p",[t._v("未来：\n面向服务架构")])])}),[],!1,null,null,null);s.default=e.exports}}]);